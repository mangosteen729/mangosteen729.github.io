<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>半个小时学会less</title>
    <url>/2020/04/16/1%E4%B8%AA%E5%B0%8F%E6%97%B6%E5%AD%A6%E4%BC%9Aless/</url>
    <content><![CDATA[<h1 id="如何使用less，以及为什么要使用less"><a href="#如何使用less，以及为什么要使用less" class="headerlink" title="如何使用less，以及为什么要使用less"></a>如何使用less，以及为什么要使用less</h1><a id="more"></a>
<h2 id="为什么在企业工作中要使用less而不是原生css"><a href="#为什么在企业工作中要使用less而不是原生css" class="headerlink" title="为什么在企业工作中要使用less而不是原生css?"></a>为什么在企业工作中要使用less而不是原生css?</h2><h3 id="1-使用less开发时更具有结构感-不会造成后期维护时因为结构混乱长时间查找需要修改的代码"><a href="#1-使用less开发时更具有结构感-不会造成后期维护时因为结构混乱长时间查找需要修改的代码" class="headerlink" title="1.使用less开发时更具有结构感,不会造成后期维护时因为结构混乱长时间查找需要修改的代码."></a>1.使用less开发时更具有结构感,不会造成后期维护时因为结构混乱长时间查找需要修改的代码.</h3><h3 id="2-使用less可以使用变量-混合等方法避免了-代码的沉余和耦合"><a href="#2-使用less可以使用变量-混合等方法避免了-代码的沉余和耦合" class="headerlink" title="2.使用less可以使用变量,混合等方法避免了,代码的沉余和耦合."></a>2.使用less可以使用变量,混合等方法避免了,代码的沉余和耦合.</h3><h2 id="如何使用less"><a href="#如何使用less" class="headerlink" title="如何使用less?"></a>如何使用less?</h2><h3 id="1-首先引入less"><a href="#1-首先引入less" class="headerlink" title="1.首先引入less"></a>1.首先引入less</h3><p><code>npm install -g less</code></p>
<h3 id="2-命令行用法："><a href="#2-命令行用法：" class="headerlink" title="2.命令行用法："></a>2.命令行用法：</h3><p>安装 Less 后，就可以在命令行上调用 Less 编译器了，如下：</p>
<p><code>$ lessc styles.less</code><br>这将输出编译之后的 CSS 代码到 stdout，你可以将输出重定向到一个文件：</p>
<p><code>$ lessc styles.less &gt; styles.css</code><br>若要输出压缩过的 CSS，只需添加 -x 选项。如果希望获得更好的压缩效果，还可以通过 –clean-css 选项启用 Clean CSS 进行压缩。</p>
<p>执行 lessc 且不带任何参数，就会在命令行上输出所有可用选项的列表。</p>
<h3 id="3-定义变量"><a href="#3-定义变量" class="headerlink" title="3.定义变量"></a>3.定义变量</h3><p>在less中可以直接定义一个变量然后使用<br>注意定义变量会延迟加载同作用域下使用变量会造成错误</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@color:pink;</span><br><span class="line">body&#123;</span><br><span class="line">    background:@color;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-嵌套结构"><a href="#4-嵌套结构" class="headerlink" title="4.嵌套结构"></a>4.嵌套结构</h3><p>可以使用&amp;符加给#box,代表#box与body平级</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">html&#123;</span><br><span class="line">    body&#123;</span><br><span class="line">        background:pink;</span><br><span class="line">        #box&#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="5-定义混合"><a href="#5-定义混合" class="headerlink" title="5.定义混合"></a>5.定义混合</h3><pre><code>混合的分类:
    1.普通混合  //会被编译,其他混合不会
    2.不带输出混合
    3.带参数的混合
    4.带参数并且有默认值的混合  //形参用变量
    5.带多个参数的混合
    6.命名参数
    7.匹配模式  //在混合里第一个参数改为自己定义的标识符如.mixin(R,@w,@h),.mixin(@_),调用时.mixin(R,20px,30px)会调用.mixin(R,@w,@h),.mixin(@_)这两个.
    8.arguments变量   //很少用同es6中的 arguments</code></pre><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.mixin(@w,@h)&#123; &#x2F;&#x2F;用.定义混合可以直接使用无变量会编译</span><br><span class="line">    position:relative;</span><br><span class="line">    width:@w;</span><br><span class="line">    height:@h;</span><br><span class="line">    background:pink;</span><br><span class="line">&#125;</span><br><span class="line">body&#123;</span><br><span class="line">    .mixin(200px , 400px)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="6-less的继承"><a href="#6-less的继承" class="headerlink" title="6.less的继承"></a>6.less的继承</h3><p>为避免编译后的css代码出现沉余,所以要用继承而不是混合</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.extend&#123;</span><br><span class="line">   position:relative;</span><br><span class="line">   left:100px;</span><br><span class="line">   &#125;</span><br><span class="line">   #app&#123;</span><br><span class="line">       &amp;:extend(.extend all);  &#x2F;&#x2F;添加all会加上其他事件如.extend:hover</span><br><span class="line">       $:nth-child(1)&#123;</span><br><span class="line">           width:100px;</span><br><span class="line">           height:200px;</span><br><span class="line">           &#125;</span><br><span class="line">       $:nth-child(2)&#123;</span><br><span class="line">           width:400px;</span><br><span class="line">           height:400px;</span><br><span class="line">           &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>编译后不会如混合一样两个子元素中都有.extend中的代码,而是在#app中</p>
<p>###7.避免编译</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">    margin:0;</span><br><span class="line">    padding:~&quot;clal(100px+100)&quot;  &#x2F;&#x2F;在编译成css时会跳过这句</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>-css篇</category>
      </categories>
      <tags>
        <tag>-less</tag>
      </tags>
  </entry>
  <entry>
    <title>css脚本化1</title>
    <url>/2020/04/16/css%E8%84%9A%E6%9C%AC%E5%8C%961/</url>
    <content><![CDATA[<h1 id="什么是css脚本化？"><a href="#什么是css脚本化？" class="headerlink" title="什么是css脚本化？"></a>什么是css脚本化？</h1><a id="more"></a>
<p>css脚本化是用js动态生成css文件</p>
<h2 id="获取元素css样式"><a href="#获取元素css样式" class="headerlink" title="获取元素css样式:"></a>获取元素css样式:</h2><pre><code>### 元素节点.style    //获取的是行内样式
    #### 1.一般使用行内样式来设置某些css属性
    #### 2.含有连词符的行内属性用驼峰命名法
    #### 3.float是保留字 一般用cssFloat

### 获取内部css样式:
    window.getComputedStyle(dom,null)   //ie8及其以上
        #### 1.一般计算样式表用来获取css属性
        #### 2.null可以换成after或before  这种伪元素的计算样式表
    dom.currentStyle     //ie8以下
        获取计算样式表</code></pre><h2 id="兼容函数"><a href="#兼容函数" class="headerlink" title="兼容函数:"></a>兼容函数:</h2><pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function fn(dom , arr)&#123;</span><br><span class="line">	if( dom.currentStyle )&#123;</span><br><span class="line">		retrun console.log(dom.currentStyle.arr)</span><br><span class="line">	&#125;else&#123;</span><br><span class="line">		retrun console.log(window.getComputedStyle(dom,null).arr)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
可以优化成:
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function fn(dom , arr)&#123;</span><br><span class="line">	return dom.currentStyle?retrun console.log(dom.currentStyle.arr):retrun console.log(window.getComputedStyle(dom,null).arr);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h2 id="获取元素的实际大小"><a href="#获取元素的实际大小" class="headerlink" title="获取元素的实际大小:"></a>获取元素的实际大小:</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dom.clientWidth		&#x2F;&#x2F;width+左右padding的值(不会加上border值)</span><br><span class="line">dom.clientHeight	&#x2F;&#x2F;height+上下padding的值(不会加上border值)</span><br><span class="line"></span><br><span class="line">dom.offsetWidth		&#x2F;&#x2F;width+左右padding+border的大小</span><br><span class="line">dom.offsetHeight	&#x2F;&#x2F;height+上下padding+border的大小</span><br><span class="line"></span><br><span class="line">dom.scrollWidth		&#x2F;&#x2F;获取dom的内容宽度(dom内容超过容器时超过dom的尺寸,没有超过获取到容器的 大小)</span><br><span class="line">dom.scrollHeight	&#x2F;&#x2F;获取dom的内容高度(dom内容超过容器时超过dom的尺寸,没有超过获取到容器的 大小)</span><br></pre></td></tr></table></figure>

<h2 id="获取元素在页面中的位置"><a href="#获取元素在页面中的位置" class="headerlink" title="获取元素在页面中的位置:"></a>获取元素在页面中的位置:</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dom.offsetTop	&#x2F;&#x2F;获取dom到定位父级的 垂直距离</span><br><span class="line">dom.offsetLeft	&#x2F;&#x2F;获取dom到定位父级的 水平距离</span><br><span class="line"></span><br><span class="line">dom.clienLeft	&#x2F;&#x2F;获取dom左边框的宽度</span><br><span class="line">dom.clienTop	&#x2F;&#x2F;获取dom上边框的宽度</span><br><span class="line"></span><br><span class="line">dom.scrollLeft	&#x2F;&#x2F;获取dom水平滚动的距离(超出部分给css属性overflow:scroll超出部分滚动条)</span><br><span class="line">dom.scrollLeft 	&#x2F;&#x2F;获取dom竖直滚动的距离.</span><br><span class="line"></span><br><span class="line">dom.offserParent	&#x2F;&#x2F;获取dom的定位父级</span><br></pre></td></tr></table></figure>

<h2 id="获取元素相对于文档的坐标-返回一个对象-x-水平距离-y-垂直距离"><a href="#获取元素相对于文档的坐标-返回一个对象-x-水平距离-y-垂直距离" class="headerlink" title="获取元素相对于文档的坐标    返回一个对象{x:水平距离 , y:垂直距离}"></a>获取元素相对于文档的坐标    返回一个对象{x:水平距离 , y:垂直距离}</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function getElementPosition(dom)&#123;</span><br><span class="line">	if(dom.offsetParent &#x3D;&#x3D;&#x3D; document.body)&#123;</span><br><span class="line">		return &#123;</span><br><span class="line">			x:dom.offsetLeft,</span><br><span class="line">			y:dom.offsetTop ;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;else&#123;	&#x2F;&#x2F;父级是body的直接子元素其子元素相对于文档的坐标</span><br><span class="line">		return &#123;</span><br><span class="line">			x:dom.offsetLeft + getElementPosition(dom.offsetParent).x ,</span><br><span class="line">			y:dom.offsetTop + getElementPosition(dom.offsetTop).y ;</span><br><span class="line">		&#125;</span><br><span class="line">&#125;</span><br><span class="line">console.log(getElementPosition(oBig));</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>-js篇</category>
      </categories>
      <tags>
        <tag>-js</tag>
      </tags>
  </entry>
  <entry>
    <title>css脚本化2</title>
    <url>/2020/04/16/css%E8%84%9A%E6%9C%AC%E5%8C%962/</url>
    <content><![CDATA[<h1 id="什么是css脚本化第二篇"><a href="#什么是css脚本化第二篇" class="headerlink" title="什么是css脚本化第二篇"></a>什么是css脚本化第二篇</h1><a id="more"></a>

<h2 id="1-获取浏览器滚动的距离"><a href="#1-获取浏览器滚动的距离" class="headerlink" title="1.获取浏览器滚动的距离:"></a>1.获取浏览器滚动的距离:</h2><pre><code>window.pageYOffset    //浏览器竖直方向滚动的距离
window.pageXOffset    //浏览器水平方向滚动的距离

在ie8及其以下:
document.documentElement.scrollLeft    //水平
document.documentElement.scrollTop    //竖直

document.body.scrollLeft
document.body.scrollTop    //写兼容函数</code></pre><h2 id="2-封装兼容函数"><a href="#2-封装兼容函数" class="headerlink" title="2.封装兼容函数:"></a>2.封装兼容函数:</h2><pre><code>function getscrollOffset(){
    if(window.papeXOffset){
        x:window.pageXOffset
        y:window.pageYOffset
    }else{
        return{
            x:document.documentElement.scrollLeft + document.body.scrollLeft,
            y:document.documentElement.scrollTop + document.body.scrollTop;
        }
    }
}</code></pre><h2 id="3-获取浏览器窗口的尺寸"><a href="#3-获取浏览器窗口的尺寸" class="headerlink" title="3.获取浏览器窗口的尺寸:"></a>3.获取浏览器窗口的尺寸:</h2><pre><code>在谷歌中
    window.innerwidth    //获取浏览器窗口的宽度值
    window.innerheight    //获取浏览器窗口的高度值</code></pre><h2 id="4-补充知识点"><a href="#4-补充知识点" class="headerlink" title="4.补充知识点:"></a>4.补充知识点:</h2><pre><code>浏览器标准模式下顶部有&lt;!DOCTYPE html&gt;就是兼容模式.</code></pre><h2 id="5-函数执行后返回的宽高兼容模式"><a href="#5-函数执行后返回的宽高兼容模式" class="headerlink" title="5.函数执行后返回的宽高兼容模式:"></a>5.函数执行后返回的宽高兼容模式:</h2><pre><code>function getViewportOffset(){
    if(window.innerWidth){
        return{
            w:window.innerwidth
            h:window.innerheight
        }
    }else{    //ie8以下
        if(document.compatNode == &apos;BackCompat&apos;){
            return{    //兼容模式
                w:document.body.clienWidth,
                h:document.body.clienHeight;
            }
        }else{    //标准模式
            return{
                w:document.documentElement.clientWidth,
                h:document.documentElement.clientHeight;
            }
        }
    }
}</code></pre><h2 id="6-让滚动条滚动距离"><a href="#6-让滚动条滚动距离" class="headerlink" title="6.让滚动条滚动距离:"></a>6.让滚动条滚动距离:</h2><pre><code>window.scrollBy(x,y)    //让滚动条水平滚动x , 竖直滚动y(可以重复使用)
window.scrollTo(x,y)    //让滚动条水平滚动到x , 竖直滚动到y</code></pre>]]></content>
      <categories>
        <category>-js篇</category>
      </categories>
      <tags>
        <tag>-js</tag>
      </tags>
  </entry>
  <entry>
    <title>express如何调用外部api</title>
    <url>/2020/04/17/express%E5%A6%82%E4%BD%95%E8%B0%83%E7%94%A8%E5%A4%96%E9%83%A8api/</url>
    <content><![CDATA[<h1 id="再node中如何调用外部的api"><a href="#再node中如何调用外部的api" class="headerlink" title="再node中如何调用外部的api"></a>再node中如何调用外部的api</h1><a id="more"></a>
<h2 id="1-需要添加request依赖"><a href="#1-需要添加request依赖" class="headerlink" title="1.需要添加request依赖"></a>1.需要添加request依赖</h2><p><img src="https://images2018.cnblogs.com/blog/858938/201803/858938-20180328153205383-1801109576.png" alt="添加依赖"></p>
<h2 id="2-复制代码"><a href="#2-复制代码" class="headerlink" title="2.复制代码"></a>2.复制代码</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var express&#x3D;require(&#39;express&#39;);</span><br><span class="line">var router&#x3D;express.Router();</span><br><span class="line">var request&#x3D;require(&#39;request&#39;);</span><br><span class="line"></span><br><span class="line">router.get(&#39;&#x2F;&#39;,function(req,res,next)&#123;</span><br><span class="line">   res.send(&quot;hello world&quot;);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;gettask</span><br><span class="line">router.get(&#39;&#x2F;gettask&#39;,function(req, res,next)&#123;</span><br><span class="line">    var e&#x3D;request(&#123;url:&#39;http:&#x2F;&#x2F;xxx:123456&#x2F;getVerify?account&#x3D;123456&#39;,</span><br><span class="line">    method:&#39;GET&#39;,</span><br><span class="line">    headers:&#123;&#39;Content-Type&#39;:&#39;text&#x2F;json&#39; &#125;</span><br><span class="line">    &#125;,function(error,response,body)&#123;</span><br><span class="line">        if(!error &amp;&amp; response.statusCode&#x3D;&#x3D;200)&#123;</span><br><span class="line">            res.render(&#39;task&#39;,&#123;&#39;data&#39;:JSON.parse(body) &#125; );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">module.exports&#x3D;router;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>-js篇</category>
      </categories>
      <tags>
        <tag>-js</tag>
      </tags>
  </entry>
  <entry>
    <title>promise原理</title>
    <url>/2020/04/16/promise%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h1 id="promise原理"><a href="#promise原理" class="headerlink" title="promise原理"></a>promise原理</h1><a id="more"></a>
<h2 id="1-promise三种状态"><a href="#1-promise三种状态" class="headerlink" title="1.promise三种状态"></a>1.promise三种状态</h2><p>是se6新增语法用于处理异步问题</p>
<h3 id="1-pending-待机状态"><a href="#1-pending-待机状态" class="headerlink" title="1.pending    待机状态"></a>1.pending    待机状态</h3><h3 id="2-reslove-正常工作状态"><a href="#2-reslove-正常工作状态" class="headerlink" title="2.reslove    正常工作状态"></a>2.reslove    正常工作状态</h3><h3 id="3-rejected-出现错误"><a href="#3-rejected-出现错误" class="headerlink" title="3.rejected   出现错误"></a>3.rejected   出现错误</h3><h2 id="2-promise核心原理"><a href="#2-promise核心原理" class="headerlink" title="2.promise核心原理"></a>2.promise核心原理</h2><p>promise的核心原理其实就是发布订阅模式，通过两个队列来缓存成功的回调（onResolve）和失败的回调（onReject）。如果还不熟悉promise用法的朋友，请参考Es6入门之promise对象，下面来分析promise的特点。</p>
<p>promise的特点：</p>
<p>new Promise时需要传递一个executor执行器,执行器会立刻执行</p>
<h3 id="1-promise状态只能从pending态转onfulfilled-onrejected到resolved或者rejected，然后执行相应缓存队列中的任务"><a href="#1-promise状态只能从pending态转onfulfilled-onrejected到resolved或者rejected，然后执行相应缓存队列中的任务" class="headerlink" title="1.promise状态只能从pending态转onfulfilled,onrejected到resolved或者rejected，然后执行相应缓存队列中的任务"></a>1.promise状态只能从pending态转onfulfilled,onrejected到resolved或者rejected，然后执行相应缓存队列中的任务</h3><h3 id="2-promise实例-每个实例都有一个then方法，这个方法传递两个参数，一个是成功回调onfulfilled-另一个是失败回调onrejected"><a href="#2-promise实例-每个实例都有一个then方法，这个方法传递两个参数，一个是成功回调onfulfilled-另一个是失败回调onrejected" class="headerlink" title="2.promise实例,每个实例都有一个then方法，这个方法传递两个参数，一个是成功回调onfulfilled,另一个是失败回调onrejected"></a>2.promise实例,每个实例都有一个then方法，这个方法传递两个参数，一个是成功回调onfulfilled,另一个是失败回调onrejected</h3><h3 id="3-promise实例调用then时，如果状态resolved，会让onfulfilled执行并且把成功的内容当作参数传递到函数中"><a href="#3-promise实例调用then时，如果状态resolved，会让onfulfilled执行并且把成功的内容当作参数传递到函数中" class="headerlink" title="3.promise实例调用then时，如果状态resolved，会让onfulfilled执行并且把成功的内容当作参数传递到函数中"></a>3.promise实例调用then时，如果状态resolved，会让onfulfilled执行并且把成功的内容当作参数传递到函数中</h3><h3 id="4-promise中可以同一个实例then多次-如果状态是pengding-需要将函数存放起来-等待状态确定后-在依次将对应的函数执行-发布订阅"><a href="#4-promise中可以同一个实例then多次-如果状态是pengding-需要将函数存放起来-等待状态确定后-在依次将对应的函数执行-发布订阅" class="headerlink" title="4.promise中可以同一个实例then多次,如果状态是pengding 需要将函数存放起来 等待状态确定后 在依次将对应的函数执行 (发布订阅)"></a>4.promise中可以同一个实例then多次,如果状态是pengding 需要将函数存放起来 等待状态确定后 在依次将对应的函数执行 (发布订阅)</h3>]]></content>
      <categories>
        <category>-js篇</category>
      </categories>
      <tags>
        <tag>-js</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack基本配置一篇搞定</title>
    <url>/2020/04/16/webpack%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE%E4%B8%80%E7%AF%87%E6%90%9E%E5%AE%9A/</url>
    <content><![CDATA[<h1 id="webpack基本配置一篇搞定"><a href="#webpack基本配置一篇搞定" class="headerlink" title="webpack基本配置一篇搞定"></a>webpack基本配置一篇搞定</h1><a id="more"></a>
<h2 id="1-1webpack-是什么"><a href="#1-1webpack-是什么" class="headerlink" title="1.1webpack 是什么"></a>1.1webpack 是什么</h2><p> webpack 是一种前端资源构建工具，一个静态模块打包器(modulebundler)。 在 webpack 看来, 前端的所有资源文件(js/json/css/img/less/…)都会作为模块处理。 它将根据模块的依赖关系进行静态分析，打包生成对应的静态资源(bundle)。</p>
<p><img src="https://dss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=3507430461,1962235833&fm=26&gp=0.jpg" alt="webpack"></p>
<h2 id="1-2webpack-五个核心概念"><a href="#1-2webpack-五个核心概念" class="headerlink" title="1.2webpack 五个核心概念"></a>1.2webpack 五个核心概念</h2><h3 id="1-2-1Entry"><a href="#1-2-1Entry" class="headerlink" title="1.2.1Entry"></a>1.2.1Entry</h3><p>入口(Entry)指示 webpack 以哪个文件为入口起点开始打包，分析构建内部依赖图。</p>
<h3 id="1-2-2Output"><a href="#1-2-2Output" class="headerlink" title="1.2.2Output"></a>1.2.2Output</h3><p>输出(Output)指示 webpack 打包后的资源 bundles 输出到哪里去，以及如何命名。</p>
<h3 id="1-2-3Loader"><a href="#1-2-3Loader" class="headerlink" title="1.2.3Loader"></a>1.2.3Loader</h3><p>Loader 让 webpack 能够去处理那些非 JavaScript 文件(webpack 自身只理解 JavaScript)</p>
<h3 id="1-2-4Plugins"><a href="#1-2-4Plugins" class="headerlink" title="1.2.4Plugins"></a>1.2.4Plugins</h3><p>插件(Plugins)可以用于执行范围更广的任务。插件的范围包括，从打包优化和压缩，<br>一直到重新定义环境中的变量等。</p>
<h3 id="1-2-5Mode"><a href="#1-2-5Mode" class="headerlink" title="1.2.5Mode"></a>1.2.5Mode</h3><p>模式(Mode)指示 webpack 使用相应模式的配置。<br>选项|描述|特点<br>—|:–:|—:<br>development|会将 DefinePlugin 中 process.env.NODE_ENV 的值设置 为 development。启用 NamedChunksPlugin 和 NamedModulesPlugin。|能让代码本地调试 运行的环境<br>production|会将 DefinePlugin 中 process.env.NODE_ENV 的值设置 为 production。启用 FlagDependencyUsagePlugin, FlagIncludedChunksPlugin,ModuleConcatenationPlugin, NoEmitOnErrorsPlugin,OccurrenceOrderPlugin, SideEffectsFlagPlugin 和 TerserPlugin。|能让代码优化上线 运行的环境</p>
<h2 id="2-1-初始化配置"><a href="#2-1-初始化配置" class="headerlink" title="2.1 初始化配置"></a>2.1 初始化配置</h2><h3 id="1-初始化-package-json-输入指令"><a href="#1-初始化-package-json-输入指令" class="headerlink" title="1. 初始化 package.json 输入指令:"></a>1. 初始化 package.json 输入指令:</h3><p><code>npminit</code></p>
<h3 id="2-下载并安装-webpack-输入指令"><a href="#2-下载并安装-webpack-输入指令" class="headerlink" title="2. 下载并安装 webpack 输入指令:"></a>2. 下载并安装 webpack 输入指令:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npminstallwebpackwebpack-cli-g</span><br><span class="line">npminstallwebpackwebpack-cli-D</span><br></pre></td></tr></table></figure>
<h2 id="2-2-编译打包应用"><a href="#2-2-编译打包应用" class="headerlink" title="2.2 编译打包应用"></a>2.2 编译打包应用</h2><h3 id="1-创建文件"><a href="#1-创建文件" class="headerlink" title="1. 创建文件"></a>1. 创建文件</h3><h3 id="2-运行指令"><a href="#2-运行指令" class="headerlink" title="2. 运行指令"></a>2. 运行指令</h3><p>开发环境指令：<br><code>webpacksrc/js/index.js-obuild/js/built.js--mode=development</code><br>功能：webpack 能够编译打包 js 和 json 文件，并且能将 es6 的模块化语法转换成浏览器能识别的语法。<br>生产环境指令：<br><code>webpacksrc/js/index.js-obuild/js/built.js--mode=production</code><br>功能：在开发配置功能上多一个功能，压缩代码。</p>
<h3 id="3-结论-webpack-能够编译打包-js-和-json-文件。"><a href="#3-结论-webpack-能够编译打包-js-和-json-文件。" class="headerlink" title="3. 结论 webpack 能够编译打包 js 和 json 文件。"></a>3. 结论 webpack 能够编译打包 js 和 json 文件。</h3><p>能将 es6 的模块化语法转换成浏览器能识别的语法。能压缩代码。</p>
<h3 id="4-问题-不能编译打包-css、img-等文件。"><a href="#4-问题-不能编译打包-css、img-等文件。" class="headerlink" title="4. 问题 不能编译打包 css、img 等文件。"></a>4. 问题 不能编译打包 css、img 等文件。</h3><p>不能将 js 的 es6 基本语法转化为 es5 以下语法。</p>
<h2 id="3-1-创建配置文件"><a href="#3-1-创建配置文件" class="headerlink" title="3.1 创建配置文件"></a>3.1 创建配置文件</h2><h3 id="1-创建文件-webpack-config-js"><a href="#1-创建文件-webpack-config-js" class="headerlink" title="1. 创建文件 webpack.config.js"></a>1. 创建文件 webpack.config.js</h3><h3 id="2-配置内容如下"><a href="#2-配置内容如下" class="headerlink" title="2. 配置内容如下"></a>2. 配置内容如下</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const &#123; resolve &#125; &#x3D; require(&#39;path&#39;);       &#x2F; &#x2F; n o d e 内 置 核 心 模 块 ， 用 来 处 理 路 径 问 题 。</span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">entry: &#39;.&#x2F;src&#x2F;js&#x2F;index.js&#39;,</span><br><span class="line">&#x2F; &#x2F; 入 口 文 件</span><br><span class="line">output: &#123;</span><br><span class="line">&#x2F; &#x2F; 输 出 配 置</span><br><span class="line">filename: &#39;.&#x2F;built.js&#39;,</span><br><span class="line">&#x2F; &#x2F; 输 出 文 件 名</span><br><span class="line">path: resolve(__dirname, &#39;build&#x2F;js&#39;)</span><br><span class="line">&#x2F; &#x2F; 输 出 文 件 路 径 配 置</span><br><span class="line">&#125;,</span><br><span class="line">mode: &#39;development&#39;</span><br><span class="line">&#x2F; &#x2F; 开 发 环 境</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="3-运行指令-webpack"><a href="#3-运行指令-webpack" class="headerlink" title="3.运行指令:webpack"></a>3.运行指令:webpack</h3><h3 id="4-结论-此时功能与上节一致"><a href="#4-结论-此时功能与上节一致" class="headerlink" title="4. 结论: 此时功能与上节一致"></a>4. 结论: 此时功能与上节一致</h3><h2 id="3-2-打包样式资源"><a href="#3-2-打包样式资源" class="headerlink" title="3.2 打包样式资源"></a>3.2 打包样式资源</h2><h3 id="1-创建文件-webpack-config-js-1"><a href="#1-创建文件-webpack-config-js-1" class="headerlink" title="1. 创建文件 webpack.config.js"></a>1. 创建文件 webpack.config.js</h3><h3 id="2-下载安装-loader-包"><a href="#2-下载安装-loader-包" class="headerlink" title="2. 下载安装 loader 包"></a>2. 下载安装 loader 包</h3><p><code>npmicss-loaderstyle-loaderless-loaderless-D</code></p>
<h3 id="3-修改配置文件"><a href="#3-修改配置文件" class="headerlink" title="3. 修改配置文件"></a>3. 修改配置文件</h3><figure class="highlight plain"><figcaption><span>resolve 用来拼接绝对路径的方法 const &#123; resolve &#125; </span></figcaption><table><tr><td class="code"><pre><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">    &#x2F;&#x2F; webpack 配置</span><br><span class="line">    &#x2F;&#x2F; 入口起点 entry: &#39;.&#x2F;src&#x2F;index.js&#39;,</span><br><span class="line">    &#x2F;&#x2F; 输出 output: &#123;</span><br><span class="line">        &#x2F;&#x2F; 输出文件名 filename: &#39;built.js&#39;,</span><br><span class="line">        &#x2F;&#x2F; 输出路径</span><br><span class="line">            &#x2F;&#x2F; __dirname nodejs 的变量，代表当前文件的目录绝对路径</span><br><span class="line">            path: resolve(__dirname, &#39;build&#39;)</span><br><span class="line">&#125;,</span><br><span class="line">&#x2F;&#x2F; loader 的配置 module: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#x2F;&#x2F; 详细 loader 配置</span><br><span class="line">            &#x2F;&#x2F; 不同文件必须配置不同 loader 处理 &#123;</span><br><span class="line">                    &#x2F;&#x2F; 匹配哪些文件 test: &#x2F;\.css$&#x2F;,</span><br><span class="line">                    &#x2F;&#x2F; 使用哪些 loader 进行处理 use: [</span><br><span class="line">                            &#x2F;&#x2F; use 数组中 loader 执行顺序：从右到左，从下到上 依次执行</span><br><span class="line">                            &#x2F;&#x2F; 创建 style 标签，将 js 中的样式资源插入进行，添加到 head 中生效 &#39;style-loader&#39;,</span><br><span class="line">                            &#x2F;&#x2F; 将 css 文件变成 commonjs 模块加载 js 中，里面内容是样式字符串 &#39;css-loader&#39;</span><br><span class="line">                            ] &#125;,</span><br><span class="line">                            &#123; test: &#x2F;\.less$&#x2F;,</span><br><span class="line">                            use: [</span><br><span class="line">                            &#39;style-loader&#39;,</span><br><span class="line">                            &#39;css-loader&#39;,</span><br><span class="line">                            &#x2F;&#x2F; 将 less 文件编译成 css 文件</span><br><span class="line">                            &#x2F;&#x2F; 需要下载 less-loader 和 less &#39;less-loader&#39;</span><br><span class="line">                            ] &#125;</span><br><span class="line">                ] &#125;,</span><br><span class="line">                &#x2F;&#x2F; plugins 的配置</span><br><span class="line">                plugins: [</span><br><span class="line">                    &#x2F;&#x2F; 详细 plugins 的配置</span><br><span class="line">                    ],</span><br><span class="line">                    &#x2F;&#x2F; 模式 mode: &#39;development&#39;,</span><br><span class="line">                    &#x2F;&#x2F; 开发模式 &#x2F;&#x2F; mode: &#39;production&#39;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-运行指令-webpack"><a href="#4-运行指令-webpack" class="headerlink" title="4. 运行指令:webpack"></a>4. 运行指令:webpack</h3><h2 id="3-3-打包-HTML-资源"><a href="#3-3-打包-HTML-资源" class="headerlink" title="3.3 打包 HTML 资源"></a>3.3 打包 HTML 资源</h2><h3 id="1-创建文件-webpack-config-js-2"><a href="#1-创建文件-webpack-config-js-2" class="headerlink" title="1. 创建文件 (webpack.config.js)"></a>1. 创建文件 (webpack.config.js)</h3><h3 id="2-下载安装-plugin-包"><a href="#2-下载安装-plugin-包" class="headerlink" title="2. 下载安装 plugin 包"></a>2. 下载安装 plugin 包</h3><p><code>npminstall--save-devhtml-webpack-plugin</code></p>
<h3 id="3-修改配置文件-1"><a href="#3-修改配置文件-1" class="headerlink" title="3. 修改配置文件"></a>3. 修改配置文件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const &#123; resolve &#125; &#x3D; require(&#39;path&#39;);</span><br><span class="line">const HtmlWebpackPlugin &#x3D; require(&#39;html-webpack-plugin&#39;);</span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">    entry: &#39;.&#x2F;src&#x2F;index.js&#39;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: &#39;built.js&#39;,</span><br><span class="line">        path: resolve(__dirname, &#39;build&#39;) &#125;,</span><br><span class="line">        module: &#123;</span><br><span class="line">            rules: [ &#x2F;&#x2F; loader 的配置 ] &#125;,</span><br><span class="line">            plugins: [</span><br><span class="line">                &#x2F;&#x2F; plugins 的配置</span><br><span class="line">                &#x2F;&#x2F; html-webpack-plugin</span><br><span class="line">                &#x2F;&#x2F; 功能：默认会创建一个空的 HTML，自动引入打包输出的所有资源（JS&#x2F;CSS）</span><br><span class="line">                &#x2F;&#x2F; 需求：需要有结构的 HTML 文件</span><br><span class="line">                new HtmlWebpackPlugin(&#123;</span><br><span class="line">                    &#x2F;&#x2F; 复制 &#39;.&#x2F;src&#x2F;index.html&#39; 文件，并自动引入打包输出的所有资源（JS&#x2F;CSS）</span><br><span class="line">                    template: &#39;.&#x2F;src&#x2F;index.html&#39;</span><br><span class="line">                    &#125;) ],</span><br><span class="line">                mode: &#39;development&#39;</span><br><span class="line">                &#125;;</span><br></pre></td></tr></table></figure>
<h3 id="4-运行指令-webpack-1"><a href="#4-运行指令-webpack-1" class="headerlink" title="4.运行指令:webpack"></a>4.运行指令:webpack</h3><h2 id="3-4-打包图片资源"><a href="#3-4-打包图片资源" class="headerlink" title="3.4 打包图片资源"></a>3.4 打包图片资源</h2><h3 id="1-创建文件-1"><a href="#1-创建文件-1" class="headerlink" title="1. 创建文件"></a>1. 创建文件</h3><h3 id="2-下载安装-loader-包-1"><a href="#2-下载安装-loader-包-1" class="headerlink" title="2. 下载安装 loader 包"></a>2. 下载安装 loader 包</h3><p>·npminstall–save-devhtml-loaderurl-loaderfile-loader·</p>
<h3 id="3-修改配置文件-2"><a href="#3-修改配置文件-2" class="headerlink" title="3. 修改配置文件"></a>3. 修改配置文件</h3><p>···<br>const { resolve } = require(‘path’);<br>const HtmlWebpackPlugin = require(‘html-webpack-plugin’);<br>module.exports = {<br>    entry: ‘./src/index.js’,<br>    output: {<br>        filename: ‘built.js’,<br>        path: resolve(__dirname, ‘build’)<br>        },<br>    module: {<br>        rules: [<br>            {<br>                test: /.less$/,<br>                // 要使用多个 loader 处理用<br>                use use: [‘style-loader’, ‘css-loader’, ‘less-loader’]<br>            },<br>            {<br>                // 问题：默认处理不了 html 中 img 图片<br>                // 处理图片资源<br>                test: /.(jpg|png|gif)$/,<br>                // 使用一个 loader<br>                // 下载 url-loader file-loader<br>                loader: ‘url-loader’,<br>                options: {<br>                // 图片大小小于 8kb，就会被 base64 处理<br>                // 优点: 减少请求数量（减轻服务器压力）<br>                // 缺点：图片体积会更大（文件请求速度更慢）<br>                limit: 8 * 1024,<br>                // 问题： 因为url-loader默认使用es6模块化解析， 而html-loader引入图片是commonjs<br>                // 解析时会出问题：[object Module]<br>                // 解决：关闭 url-loader 的 es6 模块化，使用 commonjs 解析 esModule: false, /<br>                / 给图片进行重命名<br>                // [hash:10]取图片的 hash 的前 10 位<br>                // [ext]取文件原来扩展名 name: ‘[hash:10].[ext]’<br>                }<br>            },<br>            {<br>                test: /.html$/,<br>                // 处理 html 文件的 img 图片（负责引入 img，从而能被 url-loader 进行处理）<br>                loader: ‘html-loader’<br>            }]<br>            },<br>    plugins: [<br>        new HtmlWebpackPlugin({<br>            template: ‘./src/index.html’<br>            })<br>            ],<br>    mode: ‘development’<br>    };<br>···</p>
<h3 id="4-运行指令-webpack-2"><a href="#4-运行指令-webpack-2" class="headerlink" title="4.运行指令:webpack"></a>4.运行指令:webpack</h3>]]></content>
      <categories>
        <category>-webpack</category>
      </categories>
      <tags>
        <tag>-webpack vue配置</tag>
      </tags>
  </entry>
  <entry>
    <title>可枚举和不可枚举</title>
    <url>/2020/04/19/%E5%8F%AF%E6%9E%9A%E4%B8%BE%E5%92%8C%E4%B8%8D%E5%8F%AF%E6%9E%9A%E4%B8%BE/</url>
    <content><![CDATA[<h1 id="可枚举和不可枚举"><a href="#可枚举和不可枚举" class="headerlink" title="可枚举和不可枚举"></a>可枚举和不可枚举</h1><a id="more"></a>
<p>枚举：是指对象中的属性可以遍历出来，再简单点就是属性可以列举出来。<br>可枚举性决定了这个属性能否被for…in查找遍历到。</p>
<p>js中基本包装类型的原型属性是不可枚举的，如Object, Array, Number等，如果你写出这样的代码遍历其中的属性：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var num &#x3D; new Number();</span><br><span class="line">for(var pro in num) &#123;</span><br><span class="line">    console.log(&quot;num.&quot; + pro + &quot; &#x3D; &quot; + num[pro]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>它的输出结果会是空。这是因为Number中内置的属性是不可枚举的，所以不能被for…in访问到。</p>
<p>枚举性的作用：<br>1、for…in<br>2、Object.keys()<br>3、JSON.stringify()</p>
<p>那么什么样的属性是可枚举属性呢？<br>1、通过Object.defineProperty()方法加的可枚举属性<br>enumerable: true 可枚举</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let o &#x3D; &#123;a: 1, b: 2&#125;</span><br><span class="line">Object.defineProperty(o, &#39;c&#39;, &#123; </span><br><span class="line">    value: 3,</span><br><span class="line">    enumerable: true</span><br><span class="line">&#125;)</span><br><span class="line">for (let key in o) &#123;</span><br><span class="line">    console.log(o[key])</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*输出*&#x2F;</span><br><span class="line">&#x2F;&#x2F; 1</span><br><span class="line">&#x2F;&#x2F; 2</span><br><span class="line">&#x2F;&#x2F; 3</span><br><span class="line"></span><br><span class="line">console.log(Object.keys(o))</span><br><span class="line">&#x2F;&#x2F; [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</span><br><span class="line"></span><br><span class="line">console.log(JSON.stringify(o))</span><br><span class="line">&#x2F;&#x2F; &#123;&quot;a&quot;:1,&quot;b&quot;:2,&quot;c&quot;:3&#125;</span><br></pre></td></tr></table></figure>

<p>enumerable: false 不可枚举</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let o &#x3D; &#123;a: 1, b: 2&#125;</span><br><span class="line">Object.defineProperty(o, &#39;c&#39;, &#123;</span><br><span class="line">    value: 3,</span><br><span class="line">    enumerable: false</span><br><span class="line">&#125;)</span><br><span class="line">for (let key in o) &#123;</span><br><span class="line">    console.log(o[key])</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*输出*&#x2F;</span><br><span class="line">&#x2F;&#x2F; 1</span><br><span class="line">&#x2F;&#x2F; 2</span><br><span class="line"></span><br><span class="line">console.log(Object.keys(o))</span><br><span class="line">&#x2F;&#x2F; [&quot;a&quot;, &quot;b&quot;]</span><br><span class="line"></span><br><span class="line">console.log(JSON.stringify(o))</span><br><span class="line">&#x2F;&#x2F; &#123;&quot;a&quot;:1,&quot;b&quot;:2&#125;</span><br></pre></td></tr></table></figure>

<p>2、或者通过原型对象绑定的可以枚举属性（这种枚举类型只有for…in方法可以访问到）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function Person () &#123;</span><br><span class="line">    this.name &#x3D; &#39;Lily&#39;</span><br><span class="line">    this.gender &#x3D; &#39;女&#39;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.age &#x3D; 24</span><br><span class="line">let people &#x3D; new Person()</span><br><span class="line">for (let key in people) &#123;</span><br><span class="line">    console.log(people[key])</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*输出*&#x2F;</span><br><span class="line">&#x2F;&#x2F; Lily</span><br><span class="line">&#x2F;&#x2F; 女</span><br><span class="line">&#x2F;&#x2F; 4</span><br><span class="line">console.log(Object.keys(o))             &#x2F;&#x2F; [&quot;Lily&quot;, &quot;女&quot;]</span><br><span class="line">console.log(JSON.stringify(people))     &#x2F;&#x2F; &#123;&quot;name&quot;:&quot;Lily&quot;,&quot;gender&quot;:&quot;女&quot;&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>-js篇</category>
      </categories>
      <tags>
        <tag>-js枚举</tag>
      </tags>
  </entry>
  <entry>
    <title>第一篇文章</title>
    <url>/2020/04/15/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<h1 id="js入门"><a href="#js入门" class="headerlink" title="js入门"></a>js入门</h1><a id="more"></a>

<p>##1.什么是js？</p>
<p>是一门直译试教本语音，是一种动态语音、弱类型语言、基于原型语言</p>
<pre><code>动态类型：可以改变赋值。

弱类型：float a=

        int num=

基于原型：基于原型链面向对象的一门语言。

js与jquery的关系，jquery是js的封装库。</code></pre><p>##2.前端行为层js</p>
<p>###1.数据交互【打开页面的登录】</p>
<pre><code>Ajax、jsonp</code></pre><p>###2.操作DOM【甲方对你的需求】</p>
<pre><code>根据用户需求操作；

可以用debugger可以把js停用。</code></pre><p>##3.js的构成<br>        ECMAScript全称（一个哦周的计算机协会）</p>
<pre><code>    （这是js的语法规则）：

    es5：原生js以前版本，现阶段的学习。

    es6：全称es2015，以后版本更新变化不大。框架会讲。

DOM （文本对象）

    全称为：docunment object mode；

    例如：轮播图下点击按钮，或者div标签、div元素、div节点。

            即window下面的标签。

BOM（浏览对象）

    全称：browser object mode；

    浏览器的对象 例：浏览器的弹窗，控制台的变化。</code></pre>]]></content>
      <categories>
        <category>-js篇</category>
      </categories>
      <tags>
        <tag>-js</tag>
      </tags>
  </entry>
</search>
